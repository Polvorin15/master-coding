console.log('Hola desde retos! üëã');

// 1.- Hacer una funci√≥n que reciba como par√°metros una pila, y un n√∫mero.
// La funci√≥n debe retornar tantos elementos como diga el n√∫mero (segundo par√°metro).
// Entrada : mifuncion(['Manzana‚Äô,'Cebolla‚Äô,'Apio‚Äô,'Naranja‚Äô,'Papaya‚Äô,'Sand√≠a‚Äô,'Mel√≥n‚Äô],4)
// Salida: ['Manzana‚Äô,'Cebolla‚Äô,'Apio‚Äô,'Naranja‚Äô]

//// PSEUDOC√ìDIGO
//// PROCESO MiFuncionPilas
////    RECIBIR PAR√ÅMETROS pila (Stack), numero (number)
////
////    SI pila.tama√±o es diferente de numero, entonces:
////        SACAMOS EL √öLTIMO ELEMENTO pila.pop()
////        MiFuncionPilas(pila, numero)
////    SI NO, entonces:
////        ESCRIBIR/RETORNAR pila con tama√±o indicado por el numero recibido
////
//// FIN MiFuncionPilas

// FUNCI√ìN CON ARREGLO COMO PAR√ÅMETRO
const miFuncionPilasArreglo = (pila, numero) => {
  if(pila.length !== numero){
    pila.pop();
    return miFuncionPilasArreglo(pila, numero);
  }
  return pila;
}
const pilaFrutasArreglo = ['Manzana','Cebolla','Apio','Naranja','Papaya','Sand√≠a','Mel√≥n'];
console.log(pilaFrutasArreglo);
console.log('Iniciando funci√≥n con arreglo como pila');
console.log(miFuncionPilasArreglo(pilaFrutasArreglo, 4));
console.log('Termin√≥ funci√≥n');

// FUNCI√ìN CON OBJETO CLASE STACK COMO PAR√ÅMETRO
const miFuncionPilasObjetoStack = (pila, numero) => {
  if(pila.length() !== numero){
    pila.pop();
    return miFuncionPilasObjetoStack(pila, numero);
  }
  return pila;
}

const pilaClaseStack = new Stack();
console.log(pilaClaseStack);

// pilaClaseStack.push('Manzana')
// pilaClaseStack.push('Cebolla')
// pilaClaseStack.push('Apio')
// ...

const pilaFrutasArregloStack = ['Manzana','Cebolla','Apio','Naranja','Papaya','Sand√≠a','Mel√≥n'];
for (let i = 0; i < pilaFrutasArregloStack.length; i++) {
  pilaClaseStack.push(pilaFrutasArregloStack[i])
}
console.log(pilaClaseStack);

console.log('Iniciando funci√≥n con objeto clase pila');
console.log(miFuncionPilasObjetoStack(pilaClaseStack, 4));
console.log('Termin√≥ funci√≥n');

// 2.- Escribe una funci√≥n ‚Äúreemplazar‚Äù que tenga como par√°metros una pila de elementos, y dos valores tambi√©n de tipo Number ‚Äúnuevo‚Äù y ‚Äúviejo‚Äù, de forma que si el segundo valor aparece en alg√∫n lugar de la pila, sea reemplazado por el primero (Solo la primera vez), y har√° pop de los elementos m√°s nuevos.
// Entrada: reemplazar([3,2,3,4,6,8,1,2,5,5], 7, 2)
// Salida: [3,2,3,4,6,8,1,7]

// PSEUDOC√ìDIGO
//// INICIO PROCESO REEMPLAZAR
////     RECIBIR PAR√ÅMETROS pila Stack, nuevo number, viejo number
////
////     SI √∫ltimo elemento de la pila es diferente de != viejo, entonces:
////         Lo sacamos con pila.pop()
////         REEMPLAZAR(pila, nuevo, viejo)
////     SI NO, entonces:
////         Sacamos viejo con pila.pop() y lo reemplazamos por nuevo con pila.push(nuevo)
////
//// FIN PROCESO REEMPLAZAR

// 3.- Un conductor maneja de un pueblo origen a un pueblo destino, pasando por varios
// pueblos. Una vez en el pueblo destino, el conductor debe regresar a casa por el mismo
// camino. Muestre el camino recorrido tanto de ida como de vuelta.
// Recorrido: Pueblo Origen ‚Üí pueblo 1 ‚Üí pueblo 2 ‚Üí destino
// Regreso: destino ‚Üí pueblo 2‚Äô ‚Üí pueblo 1 ‚Üí Pueblo Origen

// PSEUDOC√ìDIGO
//// INICIO PROCESO RECORRIDO
////      RECIBIR pila Stack (pueblos a visitar)
////      SI pila.length() != 0, entonces,
////          RECORRIDO(pila)
////          RETORNAMOS pila.pop()
////      SI NO, entonces:
////          IMPRIMIR/RETORNAMOS LA PILA
//// FIN PROCESO RECORRIDO
